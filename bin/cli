#!/usr/bin/env node
var program  = require('optimist'),
    commandForArg = require('../lib/cli/command-for-arg'),
    interactivePrompt = require('../lib/cli/interactive-prompt'),
    RadiodanClient  = require('radiodan-client'),
    utils = require('../lib/utils');

var queueHost,
    command,
    argv,
    messaging,
    radio,
    interactive;

/*
  Command-line options
*/
argv = program
        .usage('Usage: $0')
        .demand('id')
        .describe('id', 'ID of radio instance to control')
        .describe('random.directory', 'Play random tracks from specified directory')
        .describe('play.stream', 'Play an internet stream')
        .describe('volume.value', 'Set to an absolute volume')
        .describe('volume.diff', 'Set to an offset of current volume (+/-N)')
        .describe('host', 'Set message queue hostname. Default: localhost')
        .describe('interactive', 'Set-up interactive command mode')
        .describe('log-level', 'Set the log level. Default: warn')
        .alias('i', 'interactive')
        .argv;

if (argv['log-level'] && typeof argv['log-level'] == 'string') {
  utils.logger.setLevel(argv['log-level']);
  RadiodanClient.setLogLevel(argv['log-level']);
}

// Override message queue host
if (argv.host && typeof argv.host === 'string') {
  queueHost = argv.host;
}

// Extract required radio id or error
if (argv.id && typeof argv.id === 'string') {
  radio = RadiodanClient.create({host:queueHost}).get(argv.id);
} else {
  console.log('Missing required arguments: id');
  program.showHelp();
  process.exit();
}

// Extract command from argv
promise = commandForArg(argv, radio);

if (!argv.interactive) {
  promise.then(doneAndExit, showHelpAndExit);
}

function showHelpAndExit () {
  program.showHelp();
  console.log('Error: command option not given or failed\n');
  process.exit();
}

if (argv.interactive) {
  interactive = interactivePrompt(program, radio);
  interactive.on('command', function(command) { interactive.done(); });
}

/*
  Log 'done' and then exit
*/
function doneAndExit(err, ok) {
  console.log('Done');
  process.exit();
}
