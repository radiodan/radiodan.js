#!/usr/bin/env node
var program  = require('optimist'),
    commandForArg = require('../lib/cli/command-for-arg'),
    interactivePrompt = require('../lib/cli/interactive-prompt'),
    Messaging = require('../lib/cli/messaging');

var queueHost,
    command,
    argv,
    messaging,
    interactive;

/*
  Command-line options
*/
argv = program
        .usage('Usage: $0')
        .demand('id')
        .describe('id', 'ID of radio instance to control')
        .describe('random.directory', 'Play random tracks from specified directory')
        .describe('play.stream', 'Play an internet stream')
        .describe('volume.value', 'Set to an absolute volume')
        .describe('volume.diff', 'Set to an offset of current volume (+/-N)')
        .describe('host', 'Set message queue hostname. Default: localhost')
        .describe('interactive', 'Set-up interactive command mode')
        .alias('i', 'interactive')
        .argv;

// Override message queue host
if (argv.host && typeof argv.host === 'string') {
  queueHost = argv.host;
}

// Extract required radio id or error
if (argv.id && typeof argv.id === 'string') {
  messaging = Messaging.create(argv.id);
} else {
  console.log('Missing required arguments: id');
  program.showHelp();
  process.exit();
}

// Extract command from argv
command = commandForArg(argv);

if (!command && !argv.interactive) {
  program.showHelp();
  console.log('Error: command option not given - nothing to do\n');
  process.exit();
}

if (argv.interactive) {
  interactive = interactivePrompt(program);
  interactive.on('command', function(command) { messaging.sendCommand(command, interactive.done) });
} else {
  messaging.sendCommand(command, doneAndExit);
}

/*
  Log 'done' and then exit
*/
function doneAndExit(err, ok) {
  console.log('Done');
  process.exit();
}
