#!/usr/bin/env node
var program = require('commander'),
    path    = require('path'),
    package = require('../package.json'),
    amqp    = require('amqplib'),
    Q       = require('q'),
    configFile = 'config.json';

program
  .version(package.version)
  .usage('[options] config_file')
  .parse(process.argv);

switch(true) {
  case program.args.length == 1:
    configFile = program.args[0];
    break;
  case program.args.length > 1:
    program.help();
    break;
  default:
    //No config leaves us with defaults
}

var Radiodan = require(__dirname+'/../lib/radiodan'),
    radios = [];

try {
  var config = require(path.relative(__dirname, configFile));
} catch(err) {
  program.help();
  process.exit(1);
}

var radios = config.radios.map(function(radio, i) {
  var radioConfig = config.paths;
  radioConfig.name = radio.name;

  var radiodan = Radiodan.create(config.paths, radio).start();

/*
  radiodan.ready().then(function() {
    radiodan.sendCommands([
      ['clear'], ['add', ['iTunes']], ['random', ['1']], ['play']
    ]);
  });
*/

  return radiodan;
})

var waitForConnection = amqp.connect('amqp://localhost');

var channel;

waitForConnection.then(function (connection) {
  var waitForChannel = connection.createChannel();
  waitForChannel.then(function (ch) {
    channel = ch;
    var waitForExchange = channel.assertExchange('radiodan', 'topic');
    var waitForQueue = channel.assertQueue('commands');
    var waitForBind  = Q.all([waitForExchange, waitForQueue]).then(function (nothing, qok) {
      channel.bindQueue('commands', 'radiodan', 'commands.play');

      channel.consume('commands', doSomething);
    });
  });
});

function doSomething(data) {
  console.log('data', data);
  var command = JSON.parse(data.content);
  console.log('command', command);
  switch(command.player) {
    case 'random':
      var radio = radios[command.playerId];
      radio.sendCommands([
        ['clear'], ['add', ['iTunes']], ['random', ['1']], ['play']
      ]).then(function() { console.log("Played Randomly")});
      break;
    default:
      console.log("Don't know what to do with" + command.player);
  }

  channel.ack(data);
}
