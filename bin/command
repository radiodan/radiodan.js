#!/usr/bin/env node
var amqp    = require('amqplib'),
    program = require('optimist');

var waitForConnection = amqp.connect('amqp://localhost'),
    command,
    argv,
    radioId,
    channel;

program
  .usage('Usage: $0')
  .demand('uuid')
  .describe('uuid', 'UUID of radio instance to control')
  .describe('random.directory', 'Play random tracks from specified directory')
  .describe('volume.value', 'Set to an absolute volume')
  .describe('volume.diff', 'Set to an offset of current volume (+/-N)');

argv = program.argv;

if (argv.volume) {
  command = argv.volume;
  command.action = 'volume';
} else if (argv.random) {
  command = argv.random;
  command.action = 'random';
} else {
  program.showHelp();
  process.exit();
}

radioId = argv.uuid;

if (!radioId) {
  program.showHelp();
  process.exit();
}

command = JSON.stringify(command);

waitForConnection.then(function (connection) {
  var waitForChannel = connection.createConfirmChannel();
  waitForChannel.then(function (ch) {
    channel = ch;
    var waitForExchange = channel.assertExchange('radiodan', 'topic');
    waitForExchange.then(function () {
      channel.publish('radiodan', topicForId(radioId), new Buffer(command), {}, done);
      console.log('published to %s', topicForId(radioId), command);
    }).fail(function () {
      console.error('error')
    });
  });
});

function done(err, ok) {
  console.log('Done');
  process.exit();
}

function topicForId(id) {
  return 'radio.' + id + '.command';
}
